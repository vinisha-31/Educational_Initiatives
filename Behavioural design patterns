a)Observer Pattern-Notification system
// IObserver.java
public interface IObserver {
    void update(String message);
}

// ISubject.java
public interface ISubject {
    void registerObserver(IObserver observer);
    void removeObserver(IObserver observer);
    void notifyObservers(String message);
}

// NotificationService.java
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class NotificationService implements ISubject {
    private final List<IObserver> observers = new ArrayList<>();

    @Override
    public void registerObserver(IObserver observer) {
        Objects.requireNonNull(observer, "Observer cannot be null");
        if (!observers.contains(observer)) {
            observers.add(observer);
        }
    }

    @Override
    public void removeObserver(IObserver observer) {
        Objects.requireNonNull(observer, "Observer cannot be null");
        observers.remove(observer);
    }

    @Override
    public void notifyObservers(String message) {
        for (IObserver observer : observers) {
            observer.update(message);
        }
    }
}

// User.java
import java.util.Objects;

public class User implements IObserver {
    private final String userName;

    public User(String userName) {
        if (userName == null || userName.trim().isEmpty())
            throw new IllegalArgumentException("UserName cannot be null or empty");
        this.userName = userName;
    }

    @Override
    public void update(String message) {
        System.out.println("Notification to " + userName + ": " + message);
    }
}

b)Strategy Pattern-Payment method selection
// IPaymentStrategy.java
public interface IPaymentStrategy {
    void pay(double amount);
}

// CreditCardPayment.java
public class CreditCardPayment implements IPaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("Processing credit card payment of $" + amount);
        // Add actual payment logic here
    }
}

// PayPalPayment.java
public class PayPalPayment implements IPaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("Processing PayPal payment of $" + amount);
        // Add actual payment logic here
    }
}

// PaymentProcessor.java
import java.util.Objects;

public class PaymentProcessor {
    private IPaymentStrategy paymentStrategy;

    public void setPaymentStrategy(IPaymentStrategy strategy) {
        this.paymentStrategy = Objects.requireNonNull(strategy, "Payment strategy cannot be null");
    }

    public void payAmount(double amount) {
        if (paymentStrategy == null) throw new IllegalStateException("Payment strategy not set.");
        if (amount <= 0) throw new IllegalArgumentException("Amount must be positive.");
        paymentStrategy.pay(amount);
    }
}

